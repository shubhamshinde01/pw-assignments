1. What is Inheritance in Java?
Ans: The technique of creating a new class by using an existing class functionality is called inheritance in Java.
In other words, inheritance is a process where a child class acquires all the properties and behaviours of the
parent class.
2. What is superclass and subclass??
Ans: A class from where a subclass inherits features is called superclass. It is also called base class or parent
class.
A class that inherits all the members (fields, method, and nested classes) from another class is called a
subclass. It is also called a derived class, child class, or extended class.
3. How is Inheritance implemented/achieved in Java?
Ans: Inheritance can be implemented or achieved by using two keywords:
extends: extends is a keyword that is used for developing the inheritance between two classes and two
interfaces.
implements: implements keyword is used for developing the inheritance between a class and interface.
4. What is polymorphism?
Ans: Polymorphism in OOP is the ability of an entity to take several forms. In other words, it refers to the ability of
an object (or a reference to an object) to take different forms of objects. It allows a common data-gathering
message to be sent to each class. Polymorphism encourages what is called ‘extendibility’ which means an
object or a class can have its uses extended.

5. Differentiate between method overloading and method overriding.
In Java, method overloading and method overriding are two distinct concepts related to the behavior of methods in classes.

	1. **Method Overloading:**
   - Method overloading occurs when a class has two or more methods with the same name but different parameters (number, type, or order).
   - It is determined at compile-time based on the method signature, considering the method name and parameter types.
   - Return types or access modifiers do not play a role in method overloading.
   - Example:

     ```java
     class Example {
         void display(int num) {
             // Method implementation
         }

         void display(String text) {
             // Method implementation
         }
     }
     ```

	2. **Method Overriding:**
   - Method overriding occurs when a subclass provides a specific implementation for a method that is already defined in its superclass.
   - It is determined at runtime, and it involves creating a new version of the method in the subclass with the same signature (method name, return type, and parameters) as in the superclass.
   - The overridden method in the subclass must have the same return type (or subtype) as the method in the superclass.
   - Example:

     ```java
     class Animal {
         void makeSound() {
             // Common implementation for all animals
         }
     }

     class Dog extends Animal {
         void makeSound() {
             // Specific implementation for dogs
         }
     }
     ```





6. What is an abstraction explained with an Example?
Ans: Abstraction is nothing but the quality of dealing with ideas rather than events. It basically deals with hiding
the internal details and showing the essential things to the user.
Abstract class Sports { // abstract class sports
Abstract void jump(); // abstract method
}

7. What is the difference between an abstract method and final method in Java?Explain with an example
Ans: The abstract method is incomplete while the final method is regarded as complete. The only way to use
an abstract method is by overriding it, but you cannot override a final method in Java.

8. What is the final class in Java?
Ans: A class declared with the final keyword is known as the final class. A final class can’t be inherited by
subclasses. By using the final class, we can restrict the inheritance of the class. We can create a class as a final
class only if it is complete in nature, which means it must not be an abstract class. In java, all the wrapper
classes are final classes like String, Integer, etc.
If we try to inherit a final class, then the compiler throws an error at compilation time. We can’t create a class as
immutable without the final class.
final class ParentClass
{
void showData()
{
System.out.println("This is a method of final Parent class");
}
}
//It will throw compilation error
class ChildClass extends ParentClass
{
void showData()
{
System.out.println("This is a method of Child class");
}
}
class MainClass
{
public static void main(String arg[])
{
ParentClass obj = new ChildClass();
obj.showData();
}
}


9. Differentiate between abstraction and encapsulation.
In object-oriented programming, abstraction and encapsulation are two fundamental concepts that contribute to the design and implementation of robust and modular software.

	1. **Abstraction:**
   - **Definition:** Abstraction is the process of simplifying complex systems by modeling classes based on their essential properties, ignoring non-essential details.
   - **Focus:** It focuses on the essential characteristics of an object and hides the irrelevant details to create a simplified model.
   - **Example:** Defining a "Vehicle" class with common attributes and methods, abstracting away the specific details of each type of vehicle (car, bike, etc.).

	2. **Encapsulation:**
   - **Definition:** Encapsulation is the bundling of data (attributes) and the methods that operate on the data into a single unit or class. It restricts direct access to some of an object's components and prevents the accidental modification of the object's state.
   - **Focus:** It focuses on bundling data and methods into a cohesive unit, and it provides control over access to the internal details of an object.
   - **Example:** Using private access modifiers to hide the internal details of a class and exposing only necessary methods to interact with the object.

	3. **Relationship:**
   - **Abstraction:** It is about creating a high-level view of an object that focuses on what an object does rather than how it achieves its functionality.
   - **Encapsulation:** It is about bundling the data and methods related to an object and controlling access to that object's internal details.

	4. **Benefits:**
   - **Abstraction:** Helps in managing complexity, promoting a clear understanding of the system, and facilitating easier maintenance and modification.
   - **Encapsulation:** Enhances data security by restricting direct access, promotes code organization, and allows for better control over an object's behavior.




