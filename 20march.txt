1. What is the Collection framework in Java?
Ans: Collection Framework is a combination of classes and interface, which is used to store and manipulate the
data in the form of objects. It provides various classes such as ArrayList, Vector, Stack, and HashSet, etc. and
interfaces such as List, Queue, Set, etc. for this purpose.

2. What is the difference between ArrayList and LinkedList?
Ans:ArrayList and LinkedList are both implementations of the List interface in Java, but they have some key differences in terms of their internal data structures and performance characteristics:

	1. Data Structure:
   - ArrayList: It uses a dynamic array to store elements. The size of the array is dynamically increased or decreased as elements are added or removed.
   - LinkedList: It uses a doubly linked list to store elements. Each element in the list is a separate object with a reference to the previous and next elements.

	2. Random Access:
   - ArrayList: Provides fast random access to elements, as it uses an array with constant-time indexing.
   - LinkedList: Does not provide fast random access. To access an element at a specific index, it needs to traverse the list from the beginning or end until the desired element is reached.

	3. Insertion and Deletion:
   - ArrayList: Insertion and deletion operations, especially in the middle of the list, can be slower as elements may need to be shifted to accommodate the changes.
   - LinkedList: Provides faster insertion and deletion operations, especially in the middle of the list, as it only requires updating the references of neighboring elements.

	4. Memory Usage:
   - ArrayList: Generally consumes less memory than a LinkedList as it only needs to store the elements and the array overhead.
   - LinkedList: Requires more memory because it needs to store additional references for each element.

	5. Iterating through Elements:
   - ArrayList: Iterating through elements is faster as it allows direct access to each element using indexing.
   - LinkedList: Iterating through elements involves following references from one element to the next, which can be slower compared to ArrayList.

	6. Performance Trade-offs:
   - ArrayList: Suitable when there are more frequent random access operations or when the list size is relatively stable.
   - LinkedList: More suitable when there are frequent insertions and deletions, especially in the middle of the list, and when random access is not a primary concern.

3.What is the difference between Iterator and ListIterator?

In Java, Iterator and ListIterator are both interfaces that provide a way to iterate over elements in a collection, but they have some differences in terms of their capabilities and the types of collections they can be used with.

	1. Basic Differences:
   - Iterator: It is a more general-purpose interface for iterating over any collection. It allows forward-only traversal of elements and supports operations like hasNext() and next().
   - ListIterator: It is a sub-interface of Iterator and is specific to List implementations (like ArrayList, LinkedList). It extends the Iterator interface and adds additional methods to support bidirectional iteration and modification of elements.

	2. Direction of Iteration:
   - Iterator: Supports only forward iteration. It has methods like hasNext() and next() for moving forward through the elements.
   - ListIterator: Supports both forward and backward iteration. In addition to hasNext() and next(), it also has methods like hasPrevious() and previous() for moving backward through the elements.

	3. Modification of Elements:
   - Iterator: Provides a basic set of methods for iterating over elements. It does not have methods for modifying the underlying collection during iteration.
   - ListIterator: Extends Iterator and adds methods like add(), remove(), and set() that allow modification of the list while iterating. This makes it more powerful but also requires the underlying list to support these operations.

	4. Collections Supported:
   - Iterator: Can be used with any collection that implements the Iterable interface, including sets and maps.
   - ListIterator: Specifically designed for List implementations like ArrayList and LinkedList.


4. What is the difference between Iterator and Enumeration?
In Java, Iterator and Enumeration are both interfaces used for iterating over collections, but they have differences in terms of capabilities and the types of collections they support.

	1. **Basic Differences:**
   - **Iterator:** Introduced in Java 1.2, it is a more powerful and versatile interface for iterating over collections. It supports both read and remove operations and is fail-fast, throwing a ConcurrentModificationException if the underlying collection is modified during iteration.
   - **Enumeration:** Introduced in Java 1.0, it is an older and less flexible interface compared to Iterator. It only supports read access to elements and does not have a built-in mechanism for removing elements during iteration.

	2. **Methods and Capabilities:**
   - **Iterator:** Provides methods like hasNext(), next(), and remove(). The remove() method allows the removal of elements from the underlying collection during iteration.
   - **Enumeration:** Provides methods like hasMoreElements() and nextElement(). It lacks a dedicated method for removing elements during iteration.

	3. **Fail-Fast vs Fail-Safe:**
   - **Iterator:** Generally follows a fail-fast behavior. If the underlying collection is modified after the creation of the iterator, it throws a ConcurrentModificationException.
   - **Enumeration:** Does not throw exceptions if the underlying collection is modified. Changes made to the collection after obtaining an Enumeration may or may not be reflected in the iteration.



5. What is the difference between List and Set?
Ans: The List anp Set both extenp the collection interfaceA However, there are some pifferences between the two
which are listep below@
o The List can contain puplicate elements whereas Set inclupes unique items@
o The List is an orperep collection which maintains the insertion orper whereas Set is an unorperep collection
which poes not preserve the insertion orper@
o The List interface contains a single legacy class which is Vector class whereas the Set interface poes not
have any legacy class@
o The List interface can allow a number of null values whereas Set interface only allows a single null value.


6. What is the difference between HashSet and TreeSet?
Ans: Both HashSet anp TreeSet are implementations of the Set interface in 2ava, but they have some
pifferences in terms of their properties anp usage1
o Ordering: HashSet is an unorperep collection of elements, while TreeSet is a sortep set of elements basep on
their natural orper or a custom comparator@
o Duplication: HashSet poes not allow puplicate elements, while TreeSet poes not allow puplicates as well@

o Implementation: HashSet is implementep using a hash table, while TreeSet is implementep using a self-
balancing binary search tree (Rep-Black tree)@

o Performance: HashSet has constant-time complexity O(1) for apping, removing, anp testing the existence of

an element, while TreeSet has a logarithmic-time complexity O(log n) for these operations pue to the self-
balancing property@

o Memory usage: HashSet uses less memory than TreeSet because it only stores the elements, while TreeSet
stores appitional information for maintaining the orper@
o Iteration: HashSet provipes no guarantees regarping the orper of iteration, while TreeSet guarantees the
elements are iteratep in sortep orper@
o Usage:Usage: HashSet is suitable when orpering is not important, anp fast access anp membership tests are
neepepA TreeSet is suitable when elements neep to be sortep or accessep in a specific orper.


7.What is the difference between Array and ArrayList?
Ans: Both arrays anp ArrayLists are usep to store collections of elements in 2ava, but they have some
pifferences in terms of their properties anp usage1
o Type: Arrays can store elements of primitive pata types as well as objects, while ArrayList can only store
objects@
o Size: The size of an array is fixep once it is createp, while the size of an ArrayList can be pynamically
increasep or pecreasep by apping or removing elements@
o Mutability: Arrays are mutable, meaning that you can mopify the elements in an array after it has been
createpA ArrayList is also mutable, but the only way to mopify it is by apping, removing or mopifying
elements@
o Performance: Arrays have better performance than ArrayLists for certain operations, such as accessing
elements by inpex, because they are implementep as a continuous block of memoryA ArrayLists, on the other
hanp, use pynamic memory allocation anp are implementep as a pynamic array, which may result in more
memory overheap anp slower performance for certain operations@
o Methods: Arrays have a limitep set of methops comparep to ArrayLists, which provipes more methops for
manipulating the collection, such as apping, removing, anp sorting elements.
E IniFializaFion: Arrays can be initialiOed with values at the time of creation, while ArrayList requires the use of
methods to add elements to the collectionN
E CompaFibiliFy: Arrays are compatible with traditional for-loops and can be easily passed to other methods,
while ArrayList requires the use of a special for-each loop and may require more code to be passed to other
methods.